@using Blazor.FullCalendar.Models
@using Blazor.FullCalendar.Components.Modals

@typeparam TCalendarEvent where TCalendarEvent : ICalendarEvent

<div class="event" @onclick="OnLeftClick" @onclick:stopPropagation="true" @oncontextmenu="OnRightClick" @oncontextmenu:preventDefault="true">
    <span>@CalendarEvent.Title</span>
</div>

@code {
    [CascadingParameter] IModalService Modal { get; set; } = default!;
    
    [Parameter]
    public TCalendarEvent CalendarEvent { get; set; } = default!;
    
    [Parameter]
    public EventCallback<TCalendarEvent> CalendarEventEdited { get; set; }
    
    [Parameter]
    public EventCallback<TCalendarEvent> CalendarEventRemoved { get; set; }

    private async Task OnLeftClick() => await ShowEditModal();
    private async Task OnRightClick() => await RemoveCalendarEvent();

    private async Task ShowEditModal()
    {
        var editCalendarEvent = (ICalendarEvent) CalendarEvent.Clone();
        var modalReference = Modal.Show<CalendarEventModal<TCalendarEvent>>("Event", new ModalParameters
        {
            {"CalendarEvent", editCalendarEvent},
            {"ButtonCloseText", "Save"}
        }, new ModalOptions
        {
            ActivateFocusTrap = true
        });
        var modalResult = await modalReference.Result;

        if (modalResult is {Confirmed: true, Data: not null} && modalResult.DataType == typeof(TCalendarEvent))
        {
            if (CalendarEventEdited is {HasDelegate: true } calendarEventEdited)
            {
                await calendarEventEdited.InvokeAsync((TCalendarEvent?) modalResult.Data);
            }
        }
    }

    private async Task RemoveCalendarEvent()
    {
        if (CalendarEventRemoved is {HasDelegate:true} calendarEventRemoveRequested)
        {
            await calendarEventRemoveRequested.InvokeAsync(CalendarEvent);
        }
    }
}